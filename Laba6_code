#include <iostream>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

void Print1(int size) {

        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'р' << ' ';
        }
        cout << endl;
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'я' << ' ';
        }
        cout << endl;
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'д' << ' ';
        }
        cout << endl;
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << i << ' ';
        }
        cout << endl << endl;
}

void Print2(int *a, int *b, int size) {

    static int* x = a;
    int static step = 0;
    
    if (x == a) {
        cout << endl << endl;
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'р' << ' ';
        }
        cout << '\t' << '\t' << '\t';
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'р' << ' ';
        }
        cout << endl;
        cout << '\t';

        for (int i = 0; i != size; i++) {
            cout << 'я' << ' ';
        }
        cout << '\t' << '\t' << '\t';
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'я' << ' ';
        }
        cout << endl;
        cout << '\t';

        for (int i = 0; i != size; i++) {
            cout << 'д' << ' ';
        }
        cout << '\t' << '\t' << '\t';
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << 'д' << ' ';
        }
        cout << endl;
        cout << '\t';

        for (int i = 0; i != size; i++) {
            cout << i << ' ';
        }
        cout << '\t' << '\t' << '\t';
        cout << '\t';
        for (int i = 0; i != size; i++) {
            cout << i << ' ';
        }
        cout << endl << endl;
    }

    cout << "строка" << step << ' ';
    for (int i = 0; i != size; i++) {
        cout << a[i] << ' ';
    }
    cout << "\t\t\t";
    cout << "строка" << step << ' ';

    for (int i = 0; i != size; i++) {
        cout << b[i] << ' ';
    }
    cout << endl;

    step++;
}

int main()
{

    srand(time(NULL));
    system("chcp 1251");
    system("cls");
    /*
    stack<int> Stack;
    stack<Edge> Edges;
    int req;
    Edge e;
    int mas[7][7] = { { 0, 1, 1, 0, 0, 0, 1 }, // матрица смежности
    { 1, 0, 1, 1, 0, 0, 0 },
    { 1, 1, 0, 0, 0, 0, 0 },
    { 0, 1, 0, 0, 1, 0, 0 },
    { 0, 0, 0, 1, 0, 1, 0 },
    { 0, 0, 0, 0, 1, 0, 1 },
    { 1, 0, 0, 0, 0, 1, 0 } };
    int nodes[7]; // вершины графа
    for (int i = 0; i < 7; i++) // исходно все вершины равны 0
        nodes[i] = 0;
    cout << "N = ";
    cin >> req;
    req--;
    Stack.push(0); // помещаем в очередь первую вершину
    while (!Stack.empty())
    { // пока стек не пуст
        int node = Stack.top(); // извлекаем вершину
        Stack.pop();
        if (nodes[node] == 2) continue;
        nodes[node] = 2; // отмечаем ее как посещенную
        for (int j = count1 + 1; j >= 0; j--)
        { // проверяем для нее все смежные вершины
            if (mas[node][j] == 1 && nodes[j] != 2)
            { // если вершина смежная и не обнаружена
                Stack.push(j); // добавляем ее в cтек
                nodes[j] = 1; // отмечаем вершину как обнаруженную
                e.begin = node; e.end = j;
                Edges.push(e);
                if (node == req) break;
            }
        }
        cout << node + 1 << endl; // выводим номер вершины
    }
    cout << "Путь до вершины " << req + 1 << endl;
    cout << req + 1;
    while (!Edges.empty())
    {
        e = Edges.top();
        Edges.pop();
        if (e.end == req)
        {
            req = e.begin;
            cout << " <- " << req + 1;
        }
    }
    cin.get(); cin.get();
    */

    // 1 матрица

    int count1 = 3;
    int count2 = 3;

    cout << "Введите кол-во вершин 1 массива " << endl;
    cin >> count1;
    if (count1 < 3) count1 = 3;
    cout << "Введите кол-во вершин 2 массива " << endl;
    cin >> count2;
    if (count2 < 3) count1 = 3;

    int** arr1 = new int* [count1];

    for (int i = 0; i < count1; i++) {
        int* a = new int[count1] {0};
        arr1[i] = a;
    }

    for (int i = 0; i < count1; i++) {

        for (int j = 0; j < count1; j++) {

            int p = rand() % 101;

            if (i == j) {
                arr1[i][j] = 0;
                continue;
            }

            if (p > 65) {
                arr1[i][j] = 1;
                arr1[j][i] = 1;
            }
            else if (p <= 65 && arr1[i][j] != 1) {
                arr1[i][j] = 0;
                arr1[j][i] = 0;
            }
        }
    }

    // 2 матрица

    int** arr2 = new int* [count2];

    for (int i = 0; i < count2; i++) {
        int* a = new int[count2] {0};
        arr2[i] = a;
    }

    for (int i = 0; i < count2; i++) {
        for (int j = 0; j != count2; j++) {

            int p = rand() % 101;

            if (i == j) {
                arr2[i][j] = 0;
                continue;
            }

            if (p > 65) {
                arr2[i][j] = 1;
                arr2[j][i] = 1;
            }
            else if(p <= 65 && arr2[i][j] != 1){
                arr2[i][j] = 0;
                arr2[j][i] = 0;
            }
        }
    }

    //заполнение списка смежности 

    vector< vector<int> > arr_list1;
    arr_list1.resize(count1);

    vector< vector<int> > arr_list2;
    arr_list2.resize(count2);

    for (int i = 0; i != count1; i++) {
        for (int j = 0; j != count1; j++) {
            if (arr1[i][j]) {
                arr_list1[i].push_back(j);
            }
        }
    }

    for (int i = 0; i != count2; i++) {
        for (int j = 0; j != count2; j++) {

            if (arr2[i][j]) {
                arr_list2[i].push_back(j);
            }
        }
    }

    cout << endl << "Матрица смежности 1" << endl << endl;
    Print1(count1);
    for (int i = 0; i != count1; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count1; j++) {
            cout << arr1[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    cout << endl << "Матрица смежности 2" << endl << endl;
    Print1(count2);
    for (int i = 0; i != count2; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count2; j++) {
            cout << arr2[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;


    cout << endl << endl << "Список смежности" << endl << endl;
    for (int i = 0; i != count1; i++) {
        cout << "Вершина " << i << "  ";
        for(int j = 0; j < arr_list1[i].size(); j++){
            cout << arr_list1[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;

    for (int i = 0; i != count2; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list2[i].size(); j++) {
            cout << arr_list2[i][j] << ' ';
        }
        cout << endl;
    }

    // задание 2.1 отождествление вершины

    cout << endl << endl << endl << "Отождествление вершины" << endl;

    int top[2]; // вводим вершины

    for (;;) {

        cout << endl << endl << "Выберите 2 вершины: ";
        cin >> top[0];
        cin >> top[1];

        if (top[0] == top[1] || !cin.good()) {
            cout << endl << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        if ((top[0] >= count1 || top[0] < 0) || (top[1] >= count1 || top[1] < 0)) {
            cout << endl << "Вы ввели неправильное значение" << endl;
            continue;
        }

        if (top[0] > top[1]) {
            int tmp = top[0];
            top[0] = top[1];
            top[1] = tmp;
        }

        break;
    }

    int* anti_top = new int[count1 - 2]; // тут остаются не введеные ввершины

    for (int i = 0, j = 0; i != count1; i++, j++) {
        if (i != top[0] && i != top[1]) anti_top[j] = i;
        else j--;
    }

   int** arr3 = new int* [count1 - 1];

    for (int i = 0; i < count1 - 1; i++) {
        int* a = new int[count1 - 1]{0};
        arr3[i] = a;
    } // результат отождествления 

    // возможность цикличности
    for (int i = 0; i != 2; i++) {
        for (int j = 0, x = 0; j != count1; j++, x++) {
            // результат соединения двух вершин записывается в наименьший из двух вершин
            if (top[0] == j || top[1] == i) {
                if (arr1[top[0]][top[1]] == 1 || arr1[top[1]][top[0]] == 1) {
                    arr3[top[0]][top[0]] = 1;
                }
            }
            if (top[1] == j && j != count1 - 1) j++; // игнорируем 2 вершину т.к. она удаляется
            if (top[1] == count1 - 1 && j == count1 - 1) x--; // x - индекс куда записываем, y - индекс, что записываем

            if (arr1[top[i]][j]) {
                arr3[top[0]][x] = 1; // заполняем слияние двух вершин
                arr3[x][top[0]] = 1; // остальные вершины если пересекались хотя бы с одним из 2 сливаемых вершин
            }
        }
    }



    for (int i = 0; i != count1 - 2; i++) {

        for (int j = 0, y = 0; j != count1 - 2; j++, y++) {
            // цикл проходит по оставшимся вершинам 
            if (arr1[anti_top[i]][anti_top[j]]) {
                if (anti_top[j] > top[1] && anti_top[i] > top[1]) {
                    arr3[anti_top[i] - 1][anti_top[j] - 1] = 1;
                    arr3[anti_top[j] - 1][anti_top[i] - 1] = 1;
                }
                else if (anti_top[j] > top[1]) {
                    arr3[anti_top[i]][anti_top[j] - 1] = 1;
                    arr3[anti_top[j] - 1][anti_top[i]] = 1;
                }
                else if (anti_top[i] > top[1]) {
                    arr3[anti_top[i] - 1][anti_top[j]] = 1;
                    arr3[anti_top[j]][anti_top[i] - 1] = 1;
                }
                else {
                    arr3[anti_top[i]][anti_top[j]] = 1;
                    arr3[anti_top[j]][anti_top[i]] = 1;
                }
            }
        }
    }
    // выводим цикл на экран

    cout << endl << "Матрица смежности" << endl << endl;
    Print1(count1 - 1);
    for (int i = 0; i != count1 - 1; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count1 - 1; j++) {
            cout << arr3[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;


    // отождествление вершин в списке смежности
    
    /// /// ///

    vector< vector<int> > arr_list3;
    arr_list3.resize(count1);
    
    for (int i = 0; i != arr_list1.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list3[i].push_back(arr_list1[i][j]);
        }
    }

    vector<int>::iterator itg = find(arr_list3[top[0]].begin(), arr_list3[top[0]].end(), top[1]); //связанна ли 1 вершина со 2-ой

    if (itg != arr_list3[top[0]].end()) { //исправить
        arr_list3[top[0]].erase(itg, itg+1);
    }     

    for (vector<int>::iterator i = arr_list3[top[1]].begin(); i != arr_list3[top[1]].end(); i++) {

        if (*i == top[0]) continue;

        itg = find(arr_list3[top[0]].begin(), arr_list3[top[0]].end(), *i);
        if (itg != arr_list3[top[0]].end() && *itg == *i) continue; // уже есть

        arr_list3[top[0]].push_back(*i);
    }

    sort(arr_list3[top[0]].begin(), arr_list3[top[0]].end()); // сортируем вершины по порядку

    for (int i = 0; i < count1 - 2; i++) {

        itg = find(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end(), top[1]);
        
        int c = count(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end(), top[0]);

        if (itg != arr_list3[anti_top[i]].end()) { // соединен со 2-ой вершиной

            arr_list3[anti_top[i]].erase(itg);

            if (c == 0) { // не соединен с 1-ой вершиной

                arr_list3[anti_top[i]].push_back(top[0]);
                sort(arr_list3[anti_top[i]].begin(), arr_list3[anti_top[i]].end());
            }
        }
    }
    arr_list3.erase(arr_list3.begin() + top[1]); // удаляем 2 склеиваемую вершину


    for (int i = 0; i != arr_list3.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list3[i].size(); j++) {
            if (arr_list3[i][j] > top[1]) arr_list3[i][j]--;
        }
    }

    cout << "Список смежности" << endl << endl;

    for (int i = 0; i != count1 - 1; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list3[i].size(); j++) {
            cout << arr_list3[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;



    // задание 2.2 стягивания  ребра

    cout << endl << endl << "Стягивание ребра" << endl;
         
    int top2[2]; // вводим вершины

    for (;;) {

        cout << endl << endl << "Выберите 2 вершины: ";
        cin >> top2[0];
        cin >> top2[1];

        if (top2[0] > top2[1]) {
            int tmp = top2[0];
            top2[0] = top2[1];
            top2[1] = tmp;
        }

        if ((top2[0] > count1 - 1 || top2[0] < 0) || (top2[1] > count1 - 1 || top2[1] < 0)) {
            cout << endl << "Вы ввели неправильное значение" << endl;
            continue;
        }

        if (top2[0] == top2[1] || !cin.good()) {
            cout << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        if (!(arr1[top2[0]][top2[1]] && arr1[top2[1]][top2[0]])) {
            cout << "Данные вершины не образуют ребро" << endl;
            continue;
        }

        break;
    }


    int *anti_top2 = new int[count1 - 2]; // тут остаются не введеные ввершины

    for (int i = 0, j = 0; i != count1; i++, j++) {
        if (i != top2[0] && i != top2[1]) anti_top2[j] = i;
        else j--;
    }

    int** arr4 = new int* [count1 - 1];

    for (int i = 0; i < count1 - 1; i++) {
        int* a = new int[count1 - 1]{0};
        arr4[i] = a;
    } // результат отождествления 


    for (int i = 0; i != 2; i++) {
        for (int j = 0, x = 0; j != count1; j++, x++) {
            // результат соединения двух вершин записывается в наименьший из двух вершин
            if (top2[0] == j) continue;
            if (top2[1] == j && j != count1 - 1) j++; // игнорируем 2 вершину т.к. она удаляется
            if (top2[1] == count1 - 1 && j == count1 - 1) x--;

            if (arr1[top2[i]][j]) {
                arr4[top2[0]][x] = 1; // заполняем слияние двух вершин
                arr4[x][top2[0]] = 1; // остальные вершины если пересекались хотя бы с одним из 2 сливаемых вершин
            }
        }
    }
    arr4[top2[0]][top2[0]] = 0;



    for (int i = 0; i < count1 - 2; i++) {

        for (int j = 0, y = 0; j < count1 - 2; j++, y++) {
            // цикл проходит по оставшимся вершинам 
            if (arr1[anti_top2[i]][anti_top2[j]]) {
                if (anti_top2[j] > top2[1] && anti_top2[i] > top2[1]) {
                    arr4[anti_top2[i] - 1][anti_top2[j] - 1] = 1;
                    arr4[anti_top2[j] - 1][anti_top2[i] - 1] = 1;
                }
                else if (anti_top2[j] > top2[1]) {
                    arr4[anti_top2[i]][anti_top2[j] - 1] = 1;
                    arr4[anti_top2[j] - 1][anti_top2[i]] = 1;
                }
                else if (anti_top2[i] > top2[1]) {
                    arr4[anti_top2[i] - 1][anti_top2[j]] = 1;
                    arr4[anti_top2[j]][anti_top2[i] - 1] = 1;
                }
                else {
                    arr4[anti_top2[i]][anti_top2[j]] = 1;
                    arr4[anti_top2[j]][anti_top2[i]] = 1;
                }
            }
        }
    }

    cout << endl << "Матрица смежности" << endl << endl;
    Print1(count1 - 1);
    for (int i = 0; i != count1 - 1; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count1 - 1; j++) {
            cout << arr4[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    // стягивания ребра для списков смежности

    vector< vector<int> > arr_list4;
    arr_list4.resize(count1);

    for (int i = 0; i != arr_list1.size(); i++) {
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list4[i].push_back(arr_list1[i][j]);
        }
    }

    itg = find(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end(), top2[1]);

    if (itg != arr_list4[top2[0]].end()) {
        arr_list4[top2[0]].erase(itg, itg + 1);
    }

    for (vector<int>::iterator i = arr_list4[top2[1]].begin(); i != arr_list4[top2[1]].end(); i++) {

        if (*i == top[0]) continue;

        itg = find(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end(), *i);
        if (itg != arr_list4[top2[0]].end() && *itg == *i) continue; // уже есть

        arr_list4[top2[0]].push_back(*i);
    }

    sort(arr_list4[top2[0]].begin(), arr_list4[top2[0]].end()); // сортируем вершины по порядку

    for (int i = 0; i < count1 - 2; i++) {

        itg = find(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end(), top2[1]);

        int c = count(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end(), top2[0]);

        if (itg != arr_list4[anti_top2[i]].end()) { // соединен со 2-ой вершиной

            arr_list4[anti_top2[i]].erase(itg);

            if (c == 0) { // не соединен с 1-ой вершиной

                arr_list4[anti_top2[i]].push_back(top2[0]);
                sort(arr_list4[anti_top2[i]].begin(), arr_list4[anti_top2[i]].end());
            }
        }
    }
    arr_list4.erase(arr_list4.begin() + top2[1]); // удаляем 2-ю склеиваемую вершину


    for (int i = 0; i != arr_list4.size(); i++) {  //копируем arr_list1s
        for (int j = 0; j != arr_list4[i].size(); j++) {
            if (arr_list4[i][j] > top[1]) arr_list4[i][j]--;
        }
    }

    cout << "Список смежности" << endl << endl;

    for (int i = 0; i != count1 - 1; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list4[i].size(); j++) {
            cout << arr_list4[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;


    // задание 2.3 расщепления вершины 

    cout << endl << endl << "Расщепление вершины" << endl;

    int** arr5 = new int* [count1 + 1];

    for (int i = 0; i < count1 + 1; i++) {
        int* a = new int[count1 + 1]{ 0 };
        arr5[i] = a;
    } // новый массив с расщеплением

    int top3;

    for (;;) {

        cout << endl << endl << "Выберите 1 вершину: ";
        cin >> top3;

        if (top3 > count1 - 1 || top3 < 0 || !cin.good()) {
            cout << "Вы ввели неправильное значение" << endl;
            cin.clear();
            cin.ignore(10, '\n');
            continue;
        }

        break;
    }

    for (int i = 0; i != count1; i++) {
        for (int j = 0; j != count1; j++) {

            if (!i) {
                arr5[0][j + 1] = arr1[top3][j]; 
                arr5[j + 1][0] = arr1[top3][j];
            }

            if (arr1[i][j]) arr5[i + 1][j + 1] = 1;
        }
    }

    arr5[0][top3 + 1] = 1;
    arr5[top3 + 1][0] = 1;

    cout << endl << "Матрица смежности" << endl << endl;
    Print1(count1 + 1);
    for (int i = 0; i != count1 + 1; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count1 + 1; j++) {
            cout << arr5[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    // расщепления вершины смежные списки


    vector< vector<int> > arr_list5;
    arr_list5.resize(count1);

    for (int i = 0; i != arr_list1.size(); i++) {
        for (int j = 0; j != arr_list1[i].size(); j++) {
            arr_list5[i].push_back(arr_list1[i][j]);
        }
    }

    vector<int> q;
    arr_list5.push_back(q);

    for (int i = 0; i != arr_list1[top3].size(); i++) {
        arr_list5[arr_list1.size()].push_back(arr_list1[top3][i]);
    }
    arr_list5[arr_list1.size()].push_back(top3);


    for (int i = 0; i != arr_list5[top3].size(); i++) {
        arr_list5[arr_list5[top3][i]].push_back(arr_list5.size() - 1);
    }
    arr_list5[top3].push_back(arr_list5.size() - 1);
    sort(arr_list5[arr_list1.size()].begin(), arr_list5[arr_list1.size()].end());

    cout << endl << endl << "Список смежности" << endl << endl;

    for (int i = 0; i != count1 + 1; i++) {
        cout << "Вершина " << i << "  ";
        for (int j = 0; j < arr_list5[i].size(); j++) {
            cout << arr_list5[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl << endl;


    // задание 3.1 объединения графов

    cout << endl << endl;

    
    int min = 1;
    int max = 1;

    if (count1 > count2) {
        min = count2;
        max = count1;
    }
    else {
        min = count1;
        max = count2;
    }

    int** arr6 = new int* [max];

    for (int i = 0; i < max; i++) {
        int* a = new int[max] {0};
        arr6[i] = a;
    }

    for (int i = 0; i != min; i++) {
        for (int j = 0; j != min; j++) {
            if (arr1[i][j] || arr2[i][j]) arr6[i][j] = 1;
        }
    }

    for (int i = min; i != max; i++) {
        for (int j = 0; j != max; j++) {
            if (count1 == max) {
                arr6[i][j] = arr1[i][j];
                arr6[j][i] = arr1[i][j];
            }
            else {
                arr6[i][j] = arr2[i][j];
                arr6[j][i] = arr2[i][j];
            }
        }
    }

    cout << endl << "Объединение графов" << endl << endl;
    Print1(max);
    for (int i = 0; i != max; i++) {
        cout << "строка1 ";
        for (int j = 0; j != max; j++) {
            cout << arr6[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;
    cout << endl;

    // задание 3.2 пересечения графов

    int** arr7 = new int* [min];

    for (int i = 0; i < min; i++) {
        int* a = new int[min] {0};
        arr7[i] = a;
    }

    for (int i = 0; i != min; i++) {

        for (int j = i + 1; j != min; j++) {

            if (arr1[i][j] && arr2[i][j]) {
                arr7[i][j] = 1;
                arr7[j][i] = 1;
            }
        }
    }

    cout << endl << "Пересечения графов" << endl << endl;
    Print1(min);
    for (int i = 0; i != min; i++) {
        cout << "строка1 ";
        for (int j = 0; j != min; j++) {
            cout << arr7[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    // задание 3.3 кольцевая сумма графов

    stack<int> Stack1;
    stack<int> Stack2;
    Stack1.push(0);
    Stack2.push(0);

    int *nodes1 = new int[count1]{ 0 }; // состояние вершин
    int *nodes2 = new int[count2]{ 0 }; // состояние вершин

    while (!Stack1.empty() && !Stack2.empty()) {

        int node1 = Stack1.top();
        int node2 = Stack2.top();
        Stack1.pop();
        Stack2.pop();

        if (nodes1[node1] == 2 && nodes2[node2]) continue; // уже были

        nodes1[node1] = 2;
        nodes2[node2] = 2;

        for (int i = 0; i != count1; i++) {

            if (arr1[node1][i] && nodes1[i] != 2) {

                Stack1.push(i);
                nodes1[i] = 1;
            }
        }
        for (int i = 0; i != count2; i++) {
            if (arr2[node2][i] && nodes2[i] != 2) {

                Stack2.push(i);
                nodes2[i] = 1;
            }
        }
    }

    int n = 0;
    for (int i = 0; i != count1; i++) {
        if (!nodes1[i]) n++;
    }
    for (int i = 0; i != count2; i++) {
        if (!nodes2[i]) n++;
    }

    if (n > 0) {
        printf("Один из графов имеет изолированн%s вершин%c \n", n == 1 ? "ую" : "ые", n == 1 ? 'у' : 'ы');
        cout << "Конец программы" << endl;
        return 0;
    }

    int** arr8 = new int* [max];

    for (int i = 0; i < max; i++) {
        int* a = new int[max] {0};
        arr8[i] = a;
    }

    for (int i = 0; i != min; i++) {

        for (int j = i + 1; j != min; j++) {

            if (arr1[i][j] != arr2[i][j]) {
                arr8[i][j] = 1;
                arr8[j][i] = 1;
            }
        }
    }

    for (int i = min; i != max; i++) {
        for (int j = 0; j != max; j++) {
            if (count1 == max) {
                arr8[i][j] = arr1[i][j];
                arr8[j][i] = arr1[i][j];
            }
            else {
                arr8[i][j] = arr2[i][j];
                arr8[j][i] = arr2[i][j];
            }
        }
    }

    cout << endl << "Матрица смежности 1" << endl << endl;
    Print1(count1);
    for (int i = 0; i != count1; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count1; j++) {
            cout << arr1[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    cout << endl << "Матрица смежности 2" << endl << endl;
    Print1(count2);
    for (int i = 0; i != count2; i++) {
        cout << "строка1 ";
        for (int j = 0; j != count2; j++) {
            cout << arr2[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    cout << endl << "Кольцевая сумма графов" << endl << endl;
    Print1(max);
    for (int i = 0; i != max; i++) {
        cout << "строка1 ";
        for (int j = 0; j != max; j++) {
            cout << arr8[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;

    return 0;
}
// умножение

cout << endl;

int** arr3 = new int* [count1 * count2];

for (int x1 = 0; x1 != count1; x1++) {

    for (int y1 = 0; y1 != count2; y1++) {
        arr3[x1 * count2 + y1] = new int[count1 * count2];

        for (int x2 = 0; x2 != count1; x2++) {

            for (int y2 = 0; y2 != count2; y2++) {
                if (x1 == x2) {
                    arr3[x1 * count2 + y1][x2 * count2 + y2] = arr2[y1][y2];
                }
                else if (y1 == y2) {
                    arr3[x1 * count2 + y1][x2 * count2 + y2] = arr1[x1][x2];
                }
                else arr3[x1 * count2 + y1][x2 * count2 + y2] = 0;
            }
        }
    }
}

for (int i = 0; i != count1 * count2; i++) {
    for (int j = 0; j != count1 * count2; j++) {
        cout << arr3[i][j] << ' ';
    }
    cout << endl;
}


return 0;
}
